name: Docker Hub Push

on:
  push:
    branches:
      - '**/dev'
      - '!web/dev'
      - '!android/dev'

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Set Environment Variables
      run: |
        BRANCH_NAME=$(echo $GITHUB_REF | awk -F'/' '{print $3}')
        echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
    
    - name: Cache Gradle dependencies
      uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          gradle-

    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Grant execute permission for gradlew
      run: chmod +x src/${{ env.BRANCH_NAME }}-service/gradlew

    - name: Build with Gradle
      env:
        AUTH_MAIL_HOST: ${{ secrets.AUTH_MAIL_HOST }}
        AUTH_MAIL_ADDRESS: ${{ secrets.AUTH_MAIL_ADDRESS }}
        AUTH_MAIL_USERNAME: ${{ secrets.AUTH_MAIL_USERNAME }}
        AUTH_MAIL_PASSWORD: ${{ secrets.AUTH_MAIL_PASSWORD }}
        AUTH_MAIL_PORT: ${{ secrets.AUTH_MAIL_PORT }}
        
        AUTH_REDIS_HOST: ${{ secrets.AUTH_REDIS_HOST }}
        AUTH_REDIS_PORT: ${{ secrets.AUTH_REDIS_PORT }}
	AUTH_JWT_SECRET_KEY: ${{ secrets.AUTH_JWT_SECRET_KEY }}
      run: |
        cd src/${{ env.BRANCH_NAME }}-service
        ./gradlew clean build -x test

    - name: Build and Push Docker Image
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        BRANCH_NAME: ${{ env.BRANCH_NAME }}

        AUTH_MAIL_HOST: ${{ secrets.AUTH_MAIL_HOST }}
        AUTH_MAIL_ADDRESS: ${{ secrets.AUTH_MAIL_ADDRESS }}
        AUTH_MAIL_USERNAME: ${{ secrets.AUTH_MAIL_USERNAME }}
        AUTH_MAIL_PASSWORD: ${{ secrets.AUTH_MAIL_PASSWORD }}
        AUTH_MAIL_PORT: ${{ secrets.AUTH_MAIL_PORT }}
        AUTH_REDIS_HOST: ${{ secrets.AUTH_REDIS_HOST }}
        AUTH_REDIS_PORT: ${{ secrets.AUTH_REDIS_PORT }}

	AUTH_JWT_SECRET_KEY: ${{ secrets.AUTH_JWT_SECRET_KEY }}

      run: |
        if [ -n "$BRANCH_NAME" ]; then
          DOCKERFILE_DIR="src/$BRANCH_NAME-service"
        else
          echo "Failed to extract branch name from GITHUB_REF."
          exit 1
        fi

        cd $DOCKERFILE_DIR
        docker run --privileged --rm tonistiigi/binfmt --install all
        docker buildx create --use
        docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
        docker buildx build --platform=linux/amd64,linux/arm64 -t $DOCKER_USERNAME/$BRANCH_NAME-service:latest . --push
